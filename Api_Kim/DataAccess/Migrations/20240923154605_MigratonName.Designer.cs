// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CharityDBContext))]
    [Migration("20240923154605_MigratonName")]
    partial class MigratonName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChatRoomUser", b =>
                {
                    b.Property<int>("IdChatRoom")
                        .HasColumnType("int")
                        .HasColumnName("idChatRoom");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdChatRoom", "IdUser")
                        .HasName("PK__ChatRoom__44BB3FA42387E54A");

                    b.HasIndex("IdUser");

                    b.ToTable("ChatRoomUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AuditLog", b =>
                {
                    b.Property<int>("IdLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLog");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLog"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("DateAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateAction")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdLog")
                        .HasName("PK__AuditLog__3C7153CAD404EE03");

                    b.HasIndex("IdUser");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"), 1L, 1);

                    b.Property<string>("NameCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nameCategory");

                    b.HasKey("IdCategory")
                        .HasName("PK__Categori__79D361B63F4B6974");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Models.ChatRoom", b =>
                {
                    b.Property<int>("IdChatRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idChatRoom");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChatRoom"), 1L, 1);

                    b.Property<string>("NameRoom")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nameRoom");

                    b.HasKey("IdChatRoom")
                        .HasName("PK__ChatRoom__77CA433CF4E3AEFC");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<int>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idComment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComment"), 1L, 1);

                    b.Property<string>("CommentDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("commentDescription");

                    b.Property<DateTime?>("DateCommented")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCommented")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdComment")
                        .HasName("PK__Comments__0370297ED3E13A79");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdUser");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.CommentMedium", b =>
                {
                    b.Property<int>("IdMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMedia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedia"), 1L, 1);

                    b.Property<int?>("IdComment")
                        .HasColumnType("int")
                        .HasColumnName("idComment");

                    b.Property<string>("MediaPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mediaPath");

                    b.Property<string>("MediaType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("mediaType");

                    b.HasKey("IdMedia")
                        .HasName("PK__CommentM__28E7F5734F3FDE32");

                    b.HasIndex("IdComment");

                    b.ToTable("CommentMedia");
                });

            modelBuilder.Entity("Domain.Models.Course", b =>
                {
                    b.Property<int>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourse"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("NameCourse")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nameCourse");

                    b.HasKey("IdCourse")
                        .HasName("PK__Courses__8982E309D2B71B88");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdUser");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Models.CourseMedium", b =>
                {
                    b.Property<int>("IdMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMedia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedia"), 1L, 1);

                    b.Property<int?>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.Property<string>("MediaPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mediaPath");

                    b.Property<string>("MediaType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("mediaType");

                    b.HasKey("IdMedia")
                        .HasName("PK__CourseMe__28E7F5731CD3FFC7");

                    b.HasIndex("IdCourse");

                    b.ToTable("CourseMedia");
                });

            modelBuilder.Entity("Domain.Models.DailyUpdate", b =>
                {
                    b.Property<int>("IdUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUpdate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUpdate"), 1L, 1);

                    b.Property<DateTime?>("DateOfPosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateOfPosted")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdUpdate")
                        .HasName("PK__DailyUpd__746286B67E0071DA");

                    b.HasIndex("IdUser");

                    b.ToTable("DailyUpdates");
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.Property<int>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idFile");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFile"), 1L, 1);

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("filePath");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("fileSize");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fileType");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("NameFile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nameFile");

                    b.HasKey("IdFile")
                        .HasName("PK__Files__775AFE7204FA4F12");

                    b.HasIndex("IdUser");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.Models.FileAccess", b =>
                {
                    b.Property<int>("IdFile")
                        .HasColumnType("int")
                        .HasColumnName("idFile");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("AccessType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("accessType");

                    b.Property<int?>("IdRole")
                        .HasColumnType("int");

                    b.Property<int?>("IdRoleNavigationIdRole")
                        .HasColumnType("int");

                    b.HasKey("IdFile", "IdUser")
                        .HasName("PK__FileAcce__442B82EAA6A02880");

                    b.HasIndex("IdRoleNavigationIdRole");

                    b.HasIndex("IdUser");

                    b.ToTable("FileAccess", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Like", b =>
                {
                    b.Property<int>("IdLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLike");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLike"), 1L, 1);

                    b.Property<int?>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.Property<int?>("IdFile")
                        .HasColumnType("int")
                        .HasColumnName("idFile");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdLike")
                        .HasName("PK__Likes__1439B2464CFB2529");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdFile");

                    b.HasIndex("IdUser");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessage"), 1L, 1);

                    b.Property<int?>("IdRecipient")
                        .HasColumnType("int")
                        .HasColumnName("idRecipient");

                    b.Property<int?>("IdSender")
                        .HasColumnType("int")
                        .HasColumnName("idSender");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("messageText");

                    b.Property<DateTime?>("SendingDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sendingDatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdMessage")
                        .HasName("PK__Messages__8D0E911D9B5F3D7A");

                    b.HasIndex("IdRecipient");

                    b.HasIndex("IdSender");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Property<int>("IdPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPost");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPost"), 1L, 1);

                    b.Property<DateTime?>("DatePosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("datePosted")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("PostContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postContent");

                    b.Property<string>("PostTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("postTitle");

                    b.HasKey("IdPost")
                        .HasName("PK__Posts__BE0F4FD65CDE2D42");

                    b.HasIndex("IdUser");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Domain.Models.PostMedium", b =>
                {
                    b.Property<int>("IdMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMedia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedia"), 1L, 1);

                    b.Property<int?>("IdPost")
                        .HasColumnType("int")
                        .HasColumnName("idPost");

                    b.Property<string>("MediaPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mediaPath");

                    b.Property<string>("MediaType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("mediaType");

                    b.HasKey("IdMedia")
                        .HasName("PK__PostMedi__28E7F57349FDB128");

                    b.HasIndex("IdPost");

                    b.ToTable("PostMedia");
                });

            modelBuilder.Entity("Domain.Models.Profile", b =>
                {
                    b.Property<int>("IdProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idProfile");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfile"), 1L, 1);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("biography");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("country");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("IdProfile")
                        .HasName("PK__Profiles__E5A723F87824DFFA");

                    b.HasIndex("IdUser");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"), 1L, 1);

                    b.Property<string>("NameRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nameRole");

                    b.HasKey("IdRole")
                        .HasName("PK__Roles__E5045C5430EA4D7B");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("IdUser")
                        .HasName("PK__Users__3717C982F8104F53");

                    b.HasIndex("Role");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164B0C59288")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserLanguage", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("language");

                    b.HasKey("IdUser", "Language")
                        .HasName("PK__UserLang__A9ED13DF6C03C2DC");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("UsersCourse", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.HasKey("IdUser", "IdCourse")
                        .HasName("PK__UsersCou__BF8FE7B2D114015B");

                    b.HasIndex("IdCourse");

                    b.ToTable("UsersCourses", (string)null);
                });

            modelBuilder.Entity("ChatRoomUser", b =>
                {
                    b.HasOne("Domain.Models.ChatRoom", null)
                        .WithMany()
                        .HasForeignKey("IdChatRoom")
                        .IsRequired()
                        .HasConstraintName("FK__ChatRoomU__idCha__5BE2A6F2");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__ChatRoomU__idUse__5CD6CB2B");
                });

            modelBuilder.Entity("Domain.Models.AuditLog", b =>
                {
                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("AuditLogs")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__AuditLog__idUser__797309D9");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.Course", "IdCourseNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdCourse")
                        .HasConstraintName("FK__Comments__idCour__60A75C0F");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Comments__idUser__5FB337D6");

                    b.Navigation("IdCourseNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.CommentMedium", b =>
                {
                    b.HasOne("Domain.Models.Comment", "IdCommentNavigation")
                        .WithMany("CommentMedia")
                        .HasForeignKey("IdComment")
                        .HasConstraintName("FK__CommentMe__idCom__6477ECF3");

                    b.Navigation("IdCommentNavigation");
                });

            modelBuilder.Entity("Domain.Models.Course", b =>
                {
                    b.HasOne("Domain.Models.Category", "IdCategoryNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("FK__Courses__idCateg__4222D4EF");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Courses__idUser__4316F928");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.CourseMedium", b =>
                {
                    b.HasOne("Domain.Models.Course", "IdCourseNavigation")
                        .WithMany("CourseMedia")
                        .HasForeignKey("IdCourse")
                        .HasConstraintName("FK__CourseMed__idCou__45F365D3");

                    b.Navigation("IdCourseNavigation");
                });

            modelBuilder.Entity("Domain.Models.DailyUpdate", b =>
                {
                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("DailyUpdates")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__DailyUpda__idUse__6D0D32F4");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Files")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Files__idUser__4D94879B");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.FileAccess", b =>
                {
                    b.HasOne("Domain.Models.File", "IdFileNavigation")
                        .WithMany("FileAccesses")
                        .HasForeignKey("IdFile")
                        .IsRequired()
                        .HasConstraintName("FK__FileAcces__idFil__5070F446");

                    b.HasOne("Domain.Models.Role", "IdRoleNavigation")
                        .WithMany("FileAccesses")
                        .HasForeignKey("IdRoleNavigationIdRole");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("FileAccesses")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__FileAcces__idUse__5165187F");

                    b.Navigation("IdFileNavigation");

                    b.Navigation("IdRoleNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Like", b =>
                {
                    b.HasOne("Domain.Models.Course", "IdCourseNavigation")
                        .WithMany("Likes")
                        .HasForeignKey("IdCourse")
                        .HasConstraintName("FK__Likes__idCourse__693CA210");

                    b.HasOne("Domain.Models.File", "IdFileNavigation")
                        .WithMany("Likes")
                        .HasForeignKey("IdFile")
                        .HasConstraintName("FK__Likes__idFile__68487DD7");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Likes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Likes__idUser__6754599E");

                    b.Navigation("IdCourseNavigation");

                    b.Navigation("IdFileNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.HasOne("Domain.Models.User", "IdRecipientNavigation")
                        .WithMany("MessageIdRecipientNavigations")
                        .HasForeignKey("IdRecipient")
                        .HasConstraintName("FK__Messages__idReci__5535A963");

                    b.HasOne("Domain.Models.User", "IdSenderNavigation")
                        .WithMany("MessageIdSenderNavigations")
                        .HasForeignKey("IdSender")
                        .HasConstraintName("FK__Messages__idSend__5441852A");

                    b.Navigation("IdRecipientNavigation");

                    b.Navigation("IdSenderNavigation");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Posts__idUser__72C60C4A");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.PostMedium", b =>
                {
                    b.HasOne("Domain.Models.Post", "IdPostNavigation")
                        .WithMany("PostMedia")
                        .HasForeignKey("IdPost")
                        .HasConstraintName("FK__PostMedia__idPos__76969D2E");

                    b.Navigation("IdPostNavigation");
                });

            modelBuilder.Entity("Domain.Models.Profile", b =>
                {
                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Profiles")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Profiles__idUser__3D5E1FD2");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Role", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK__Users__role__3A81B327");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("Domain.Models.UserLanguage", b =>
                {
                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("UserLanguages")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__UserLangu__idUse__6FE99F9F");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("UsersCourse", b =>
                {
                    b.HasOne("Domain.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("IdCourse")
                        .IsRequired()
                        .HasConstraintName("FK__UsersCour__idCou__49C3F6B7");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__UsersCour__idUse__48CFD27E");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Navigation("CommentMedia");
                });

            modelBuilder.Entity("Domain.Models.Course", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CourseMedia");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.Navigation("FileAccesses");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Navigation("PostMedia");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("FileAccesses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Comments");

                    b.Navigation("Courses");

                    b.Navigation("DailyUpdates");

                    b.Navigation("FileAccesses");

                    b.Navigation("Files");

                    b.Navigation("Likes");

                    b.Navigation("MessageIdRecipientNavigations");

                    b.Navigation("MessageIdSenderNavigations");

                    b.Navigation("Posts");

                    b.Navigation("Profiles");

                    b.Navigation("UserLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
