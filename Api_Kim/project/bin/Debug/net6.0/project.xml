<?xml version="1.0"?>
<doc>
    <assembly>
        <name>project</name>
    </assembly>
    <members>
        <member name="M:ChatController.CreateChatRoom(Domain.Contracts.ChatContracts.CreateChatRoomRequest)">
             <summary>
             Создание группового чата
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Chat/create-chat-room
            
             </remarks>
             <param name="request">Запрос с данными чата</param>
             <returns>Созданная комната чата</returns>
        </member>
        <member name="M:ChatController.AddUserToChat(System.Int32,Domain.Contracts.ChatContracts.AddUserToChatRequest)">
             <summary>
             Добавление пользователя в чат
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Chat/1/add-user
            
             </remarks>
             <param name="chatRoomId">ID чата</param>
             <param name="request">Запрос на добавление пользователя</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:ChatController.RemoveUserFromChat(System.Int32,Domain.Contracts.ChatContracts.RemoveUserFromChatRequest)">
             <summary>
             Удаление пользователя из чата
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Chat/1/remove-user
            
             </remarks>
             <param name="chatRoomId">ID чата</param>
             <param name="request">Запрос на удаление пользователя</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:ChatController.DeleteChatRoom(System.Int32)">
             <summary>
             Удаление чат-комнаты
             </summary>
             <remarks>
             Пример запроса:
            
                 DELETE /api/Chat/1
            
             </remarks>
             <param name="chatRoomId">ID чата</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:ChatController.CreatePrivateChat(Domain.Contracts.ChatContracts.CreateChatRoomRequest)">
             <summary>
             Создание приватного чата (один-на-один)
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Chat/create-private-chat
            
             </remarks>
             <param name="request">Запрос на создание приватного чата</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:CommentController.AddCommentToPost(System.Int32,Domain.Contracts.CommentContracts.CommentRequest)">
             <summary>
             Добавление комментария к посту
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Comment/post/1
            
             </remarks>
             <param name="postId">ID поста</param>
             <param name="request">Запрос с данными комментария</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:CommentController.AddCommentToCourse(System.Int32,Domain.Contracts.CommentContracts.CommentRequest)">
             <summary>
             Добавление комментария к курсу
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Comment/course/1
            
             </remarks>
             <param name="courseId">ID курса</param>
             <param name="request">Запрос с данными комментария</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:CommentController.GetCommentsForPost(System.Int32,Domain.Contracts.CommentContracts.GetCommentResponse)">
             <summary>
             Получение комментариев к посту
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/Comment/post/1
            
             </remarks>
             <param name="postId">ID поста</param>
             <returns>Комментарии к посту</returns>
        </member>
        <member name="M:CommentController.GetCommentsForCourse(System.Int32,Domain.Contracts.CommentContracts.GetCommentResponse)">
             <summary>
             Получение комментариев к курсу
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/Comment/course/1
            
             </remarks>
             <param name="courseId">ID курса</param>
             <returns>Комментарии к курсу</returns>
        </member>
        <member name="M:CommentController.UpdateComment(System.Int32,Domain.Contracts.CommentContracts.UpdateCommentRequest)">
             <summary>
             Обновление комментария
             </summary>
             <remarks>
             Пример запроса:
            
                 PUT /api/Comment/1
            
             </remarks>
             <param name="commentId">ID комментария</param>
             <param name="request">Запрос с обновленными данными комментария</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:CommentController.DeleteComment(System.Int32)">
             <summary>
             Удаление комментария
             </summary>
             <remarks>
             Пример запроса:
            
                 DELETE /api/Comment/1
            
             </remarks>
             <param name="commentId">ID комментария</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.CourseController.GetAllCourses">
             <summary>
             Получение всех курсов
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/Course
            
             </remarks>
             <returns>Список всех курсов</returns>
        </member>
        <member name="M:project.Controllers.CourseController.GetCourseById(System.Int32)">
            <summary>
            Получение информации о курсе по ID
            </summary>
            <remarks>
            Пример запроса:
            
                GET /api/Course/1
            
            </remarks>
            <param name="id">ID курса</param>
            <returns>Информация о курсе</returns>
        </member>
        <member name="M:project.Controllers.CourseController.CreateCourse(Domain.Contracts.CourseContracts.CreateCourseRequest)">
            <summary>
            Создание нового курса
            </summary>
            <remarks>
            Пример запроса:
            
                POST /api/Course
                {
                   "NameCourse" : "Программирование на C#",
                   "Description" : "Курс по основам программирования на C#",
                   "IdCategory" : 1
                }
            
            </remarks>
            <param name="courseDto">Модель курса</param>
            <returns>Созданный курс</returns>
        </member>
        <member name="M:project.Controllers.CourseController.UpdateCourse(System.Int32,Domain.Contracts.CourseContracts.CreateCourseRequest)">
            <summary>
            Обновление курса
            </summary>
            <remarks>
            Пример запроса:
            
                PUT /api/Course/1
                {
                   "NameCourse" : "Программирование на C# - Обновленный",
                   "Description" : "Обновленная информация по курсу"
                }
            
            </remarks>
            <param name="id">ID курса</param>
            <param name="courseDto">Модель для обновления курса</param>
            <returns>Обновленный курс</returns>
        </member>
        <member name="M:project.Controllers.CourseController.DeleteCourse(System.Int32)">
            <summary>
            Удаление курса
            </summary>
            <remarks>
            Пример запроса:
            
                DELETE /api/Course/1
            
            </remarks>
            <param name="id">ID курса</param>
            <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.CourseController.LikeCourse(System.Int32,Domain.Contracts.LikeContracts.LikeRequest)">
             <summary>
             Лайк курса
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Course/1/like
            
             </remarks>
             <param name="courseId">ID курса</param>
             <param name="request">Запрос с ID пользователя</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.CourseController.CommentOnCourse(System.Int32,Domain.Contracts.CommentContracts.AddCommentRequest)">
             <summary>
             Добавление комментария к курсу
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Course/1/comment
            
             </remarks>
             <param name="courseId">ID курса</param>
             <param name="request">Запрос для добавления комментария</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.CourseController.EnrollUserInCourse(System.Int32,Domain.Contracts.CourseContracts.EnrollUserRequest)">
             <summary>
             Записать пользователя на курс
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Course/1/enroll
                 {
                     "userId": 1
                 }
             </remarks>
        </member>
        <member name="M:project.Controllers.CourseController.UnenrollUserFromCourse(System.Int32,System.Int32)">
             <summary>
             Удалить пользователя с курса
             </summary>
             <remarks>
             Пример запроса:
            
                 DELETE /api/Course/1/unenroll/1
             </remarks>
        </member>
        <member name="M:project.Controllers.CourseController.AddMediaToCourse(System.Int32,Domain.Contracts.CourseContracts.AddMediaToCourseRequest)">
             <summary>
             Добавление медиа к курсу
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Course/1/media
            
             </remarks>
             <param name="courseId">ID курса</param>
             <param name="request">Запрос с данными медиафайлов</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.CourseController.AddCommentToCourse(System.Int32,Domain.Contracts.CommentContracts.AddCommentRequest)">
             <summary>
             Добавление комментария к курсу
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Course/1/comment
                 {
                    "CommentText": "Отличный курс!",
                    "UserId": 1
                 }
            
             </remarks>
             <param name="courseId">ID курса</param>
             <param name="request">Запрос с данными комментария</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.CourseController.UnenrollUserFromCourse(System.Int32,Domain.Contracts.CourseContracts.UnenrollUserFromCourseRequest)">
             <summary>
             Удаление пользователя с курса (второй метод)
             </summary>
             <remarks>
             Пример запроса:
            
                 DELETE /api/Course/1/unenroll
            
             </remarks>
             <param name="courseId">ID курса</param>
             <param name="request">Запрос с ID пользователя</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.FileController.GetFilesByUser(System.Int32)">
            <summary>
            Получение файлов пользователя
            </summary>
            <remarks>
            Пример запроса:
            
                GET /api/File/1
            
            </remarks>
            <param name="userId">ID пользователя</param>
            <returns>Список файлов пользователя</returns>
        </member>
        <member name="M:project.Controllers.FileController.UploadFile(Domain.Contracts.FileContracts.UploadFileRequest)">
            <summary>
            Загрузка файла
            </summary>
            <remarks>
            Пример запроса:
            
                POST /api/File/upload
                {
                   "FileName" : "example.jpg",
                   "FilePath" : "base64encodeddata",
                   "FileType" : "image/jpeg",
                   "IdUser" : 1
                }
            
            </remarks>
            <param name="request">Запрос на загрузку файла</param>
            <returns>Информация о загруженном файле</returns>
        </member>
        <member name="M:project.Controllers.FileController.UpdateFile(Domain.Contracts.FileContracts.UpdateFileRequest)">
            <summary>
            Обновление информации о файле
            </summary>
            <remarks>
            Пример запроса:
            
                PUT /api/File
                {
                    "IdFile": 1,
                    "FileName": "NewFileName.pdf",
                    "FileType": "application/pdf"
                }
            
            </remarks>
            <param name="request">Запрос на обновление файла</param>
            <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.FileController.DeleteFile(System.Int32)">
            <summary>
            Удаление файла
            </summary>
            <remarks>
            Пример запроса:
            
                DELETE /api/File/1
            
            </remarks>
            <param name="id">ID файла</param>
            <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.FileController.ManageFileAccess(System.Int32,Domain.Contracts.FileContracts.AccessRequest)">
             <summary>
             Управление доступом к файлам
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/File/1/access
                 {
                    "UserId": 1,
                    "AccessType": "read"
                 }
            
             </remarks>
             <param name="fileId">ID файла</param>
             <param name="request">Запрос на управление доступом</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.MessageController.GetMessagesByUser(System.Int32)">
             <summary>
             Получение сообщений пользователя
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/Message/1
            
             </remarks>
             <param name="userId">ID пользователя</param>
             <returns>Список сообщений пользователя</returns>
        </member>
        <member name="M:project.Controllers.MessageController.SendMessage(Domain.Contracts.MessageContracts.SendMessageRequest)">
             <summary>
             Отправка нового сообщения
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Message
                 {
                    "IdSender": 1,
                    "IdRecipient": 2,
                    "MessageText": "Привет, как дела?"
                 }
            
             </remarks>
             <param name="messageDto">Модель сообщения</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.MessageController.GetMessagesBetweenUsers(System.Int32,System.Int32)">
            <summary>
            Получить все сообщения между двумя пользователями
            </summary>
            <param name="senderId">ID отправителя</param>
            <param name="recipientId">ID получателя</param>
            <returns>Список сообщений</returns>
        </member>
        <member name="M:project.Controllers.PostController.GetAllPosts">
             <summary>
             Получение всех постов
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/Post
            
             </remarks>
             <returns>Список постов</returns>
        </member>
        <member name="M:project.Controllers.PostController.CreatePost(Domain.Contracts.PostContracts.CreatePostRequest)">
            <summary>
            Создание нового поста
            </summary>
            <remarks>
            Пример запроса:
            
                POST /api/Post
                {
                   "PostTitle" : "Заголовок поста",
                   "PostContent" : "Контент поста",
                   "IdUser" : 1
                }
            
            </remarks>
            <param name="postDto">Модель для создания поста</param>
            <returns>Созданный пост</returns>
        </member>
        <member name="M:project.Controllers.PostController.UpdatePost(Domain.Contracts.PostContracts.UpdatePostRequest)">
            <summary>
            Обновление поста
            </summary>
            <remarks>
            Пример запроса:
            
                PUT /api/Post
                {
                    "IdPost": 1,
                    "PostTitle": "Обновленный заголовок",
                    "PostContent": "Обновленный контент поста."
                }
            
            </remarks>
            <param name="request">Запрос на обновление поста</param>
            <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.PostController.DeletePost(System.Int32)">
            <summary>
            Удаление поста
            </summary>
            <remarks>
            Пример запроса:
            
                DELETE /api/Post/1
            
            </remarks>
            <param name="id">ID поста</param>
            <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.PostController.LikePost(System.Int32,Domain.Contracts.LikeContracts.LikeRequest)">
             <summary>
             Лайк поста
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Post/1/like
            
             </remarks>
             <param name="postId">ID поста</param>
             <param name="request">Запрос с ID пользователя</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.PostController.AddMediaToPost(System.Int32,Domain.Contracts.PostContracts.AddMediaToPostRequest)">
             <summary>
             Добавление медиафайла к посту
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Post/1/media
            
             </remarks>
             <param name="postId">ID поста</param>
             <param name="request">Запрос с данными для добавления медиа</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.RoleController.GetAllRoles">
             <summary>
             Получение всех ролей
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/Role
            
             </remarks>
             <returns>Список всех ролей</returns>
        </member>
        <member name="M:project.Controllers.RoleController.CreateRole(Domain.Contracts.RoleContracts.CreateRoleRequest)">
             <summary>
             Создание новой роли
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Role
                 {
                    "Name": "Admin"
                 }
            
             </remarks>
             <param name="request">Запрос на создание новой роли</param>
             <returns>Созданная роль</returns>
        </member>
        <member name="M:project.Controllers.RoleController.UpdateRole(System.Int32,Domain.Contracts.RoleContracts.UpdateRoleRequest)">
             <summary>
             Обновление роли
             </summary>
             <remarks>
             Пример запроса:
            
                 PUT /api/Role/1
                 {
                    "Name": "Moderator"
                 }
            
             </remarks>
             <param name="id">ID роли</param>
             <param name="request">Данные для обновления роли</param>
             <returns>Обновленная роль</returns>
        </member>
        <member name="M:project.Controllers.RoleController.DeleteRole(System.Int32)">
             <summary>
             Удаление роли
             </summary>
             <remarks>
             Пример запроса:
            
                 DELETE /api/Role/1
            
             </remarks>
             <param name="id">ID роли</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:project.Controllers.UserController.GetAllUsers">
            <summary>
            Получение всех пользователей
            </summary>
            <remarks>
            Пример запроса:
            
                GET /api/User
            
            </remarks>
            <returns>Список всех пользователей</returns>
        </member>
        <member name="M:project.Controllers.UserController.GetUserById(System.Int32)">
             <summary>
             Получение пользователя по ID
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/User/1
            
             </remarks>
             <param name="id">ID пользователя</param>
             <returns>Информация о пользователе</returns>
        </member>
        <member name="M:project.Controllers.UserController.RegisterUser(Domain.Contracts.UserContracts.CreateUserRequest)">
            <summary>
            Регистрация нового пользователя
            </summary>
            <remarks>
            Пример запроса:
            
                POST /api/User
                {
                   "FirstName" : "Иван",
                   "LastName" : "Иванов",
                   "Email" : "ivanov@example.com",
                   "Password" : "!Pa$$word123"
                }
            
            </remarks>
            <param name="request">Данные для регистрации пользователя</param>
            <returns>Ответ с результатом операции</returns>
        </member>
        <member name="M:project.Controllers.UserController.CreateUser(Domain.Contracts.UserContracts.CreateUserRequest)">
            <summary>
            Создать нового пользователя
            </summary>
            <remarks>
            Пример запроса:
            
            POST /api/User
            {
                "FirstName": "Иван",
                "LastName": "Иванов",
                "Email": "ivanov@example.com",
                "Password": "StrongPassword123!"
            }
            </remarks>
            <param name="request">Запрос на создание пользователя</param>
            <returns>Созданный пользователь</returns>
        </member>
        <member name="M:project.Controllers.UserController.UpdateUser(System.Int32,Domain.Contracts.UserContracts.UpdateUserRequest)">
            <summary>
            Обновление информации о пользователе
            </summary>
            <remarks>
            Пример запроса:
            
                PUT /api/User/1
                {
                   "FirstName" : "Иван",
                   "LastName" : "Иванов",
                   "Email" : "ivanov_new@example.com"
                }
            
            </remarks>
            <param name="id">ID пользователя</param>
            <param name="request">Данные для обновления пользователя</param>
            <returns>Ответ с результатом операции</returns>
        </member>
        <member name="M:project.Controllers.UserController.DeleteUser(System.Int32)">
            <summary>
            Удаление пользователя
            </summary>
            <remarks>
            Пример запроса:
            
                DELETE /api/User/1
            
            </remarks>
            <param name="id">ID пользователя</param>
            <returns>Ответ с результатом операции</returns>
        </member>
        <member name="M:project.Controllers.UserController.GetUsersByRole(System.String)">
             <summary>
             Получение пользователей по роли
             </summary>
             <remarks>
             Пример запроса:
            
                 GET /api/User/byRole/Admin
            
             </remarks>
             <param name="role">Роль пользователя</param>
             <returns>Список пользователей с указанной ролью</returns>
        </member>
        <member name="M:project.Controllers.UserController.ChangeUserPassword(System.Int32,Domain.Contracts.UserContracts.ChangeUserPasswordRequest)">
             <summary>
             Изменение пароля пользователя
             </summary>
             <remarks>
             Пример запроса:
            
                 PUT /api/User/1/password
            
             </remarks>
             <param name="id">ID пользователя</param>
             <param name="request">Запрос на изменение пароля</param>
             <returns>Ответ с результатом операции</returns>
        </member>
        <member name="M:MediaController.UploadPostMedia(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
             <summary>
             Загрузка медиафайла для поста
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Media/post/1/upload
            
             </remarks>
             <param name="postId">ID поста</param>
             <param name="file">Медиафайл</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:MediaController.UploadCourseMedia(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
             <summary>
             Загрузка медиафайла для курса
             </summary>
             <remarks>
             Пример запроса:
            
                 POST /api/Media/course/1/upload
            
             </remarks>
             <param name="courseId">ID курса</param>
             <param name="file">Медиафайл</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:MediaController.UpdateMedia(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
             <summary>
             Обновление медиафайла
             </summary>
             <remarks>
             Пример запроса:
            
                 PUT /api/Media/1/update
            
             </remarks>
             <param name="mediaId">ID медиафайла</param>
             <param name="newFile">Новый файл для обновления</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:MediaController.DeleteMedia(System.Int32)">
             <summary>
             Удаление медиафайла
             </summary>
             <remarks>
             Пример запроса:
            
                 DELETE /api/Media/1
            
             </remarks>
             <param name="mediaId">ID медиафайла</param>
             <returns>Результат операции</returns>
        </member>
        <member name="M:UserProfileController.GetProfileByUserId(System.Int32)">
            <summary>
            Получение профиля пользователя по ID
            </summary>
            <remarks>
            Пример запроса:
            
                GET /api/UserProfile/1
            
            </remarks>
            <param name="userId">ID пользователя</param>
            <returns>Профиль пользователя</returns>
        </member>
        <member name="M:UserProfileController.CreateOrUpdateProfile(System.Int32,Domain.Contracts.UserContracts.UpdateProfileRequest)">
            <summary>
            Создание или обновление профиля пользователя
            </summary>
            <remarks>
            Пример запроса:
            
                POST /api/UserProfile/1
                {
                   "City": "Алматы",
                   "Country": "Казахстан",
                   "PhoneNumber": "+77012345678"
                }
            
            </remarks>
            <param name="userId">ID пользователя</param>
            <param name="request">Запрос на обновление профиля</param>
            <returns>Результат операции</returns>
        </member>
        <member name="M:UserProfileController.ChangeUserLanguage(System.Int32,Domain.Contracts.UserContracts.ChangeUserLanguageRequest)">
            <summary>
            Изменение языка интерфейса пользователя
            </summary>
            <remarks>
            Пример запроса:
            
                PUT /api/UserProfile/1/language
                {
                   "LanguageCode": "EN"
                }
            
            </remarks>
            <param name="userId">ID пользователя</param>
            <param name="request">Запрос на изменение языка</param>
            <returns>Результат операции</returns>
        </member>
    </members>
</doc>
